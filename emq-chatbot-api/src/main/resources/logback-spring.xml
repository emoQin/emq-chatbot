<?xml version = "1.0" encoding = "UTF-8"?>
<!-- scan:当此属性设置为true时，配置文档如果发生改变，将会被重新加载，默认值为true。 -->
<!-- scanPeriod:当scan为true时，此属性生效。默认的时间间隔为1分钟。-->
<!-- scanPeriod:设置监测配置文档是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。 -->
<!-- debug:当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。 -->
<configuration scan="true" scanPeriod="60 seconds" debug="false">
    <!--0.基本配置 :-->
    <!-- 0.1 彩色日志依赖的渲染类 -->
    <conversionRule conversionWord="clr" converterClass="org.springframework.boot.logging.logback.ColorConverter" />
    <!-- 0.2 在堆栈跟踪周围添加一些额外的空格 -->
    <conversionRule conversionWord="wex" converterClass="org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter" />
    <!-- 0.3 彩色日志格式 -> 主要是模拟原springboot的控制台打印信息 -->
    <!-- name的值是变量的名称，value的值时变量定义的值。通过定义的值会被插入到logger上下文中。定义后，可以使“${}”来使用变量。 -->
    <property name="CONSOLE_LOG_PATTERN" value="${CONSOLE_LOG_PATTERN:-%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wex}}"/>

    <!-- 0.4 基本命名配置 -->
    <!-- 日志所在的目录,按以前的习惯,机器是linux环境,应该在jar包所在位置的log目录下(windows环境自行配置其他路径,应该是没有需求的) -->
    <!-- 获取应用名,即为jar包名 -->
    <springProperty scope="context" name="applicationName" source="logging.file.name" defaultValue = "emq-server-demo"/>
    <springProperty scope="context" name="logPathForLinux" source="logging.file.path" defaultValue = "./log/emq-server-demo"/>
    <property name="logOfDay" value="${logPathForLinux}/logOfDay"/>

    <!-- 0.5 基本滚动策略配置 -->
    <property name="fileMaxSize" value="50MB"/>
    <property name="fileMaxHistory" value="3"/>
    <property name="fileTotalSizeCap" value="1GB"/>

    <!--1. 输出到控制台 -->
    <appender name = "CONSOLE" class = "ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <!--输出格式：[时间] [级别] [[线程ID] [+++] [截取所在类名前15个字符] [所在类名] [ : ] [内容]-->
            <pattern>${CONSOLE_LOG_PATTERN}</pattern>
            <charset>UTF-8</charset><!-- 设置字符集 -->
        </encoder>
    </appender>

    <!--2. 滚动文档 -> Info 日志输出 -->
    <appender name = "INFO_LOG" class = "ch.qos.logback.core.rolling.RollingFileAppender">
        <!--2.1 设置日志级别 -->
        <!-- 日志级别从 低 到 高 分为 TRACE < DEBUG < INFO < WARN < ERROR < FATAL ，如果设置为 WARN ，则低于 WARN 的信息都不会输出 -->
        <!-- 此日志appender是为开发使用，只配置最底级别，控制台输出的日志级别是大于或等于此级别的日志信息-->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>DEBUG</level>
        </filter>

        <!--2.2 设置日志的输出格式 -->
        <encoder>
            <!-- 模仿控制台 -->
            <!-- 输出格式：[时间] [级别] [[线程ID] [+++] [截取所在类名前15个字符] [所在类名] [以及类路径] [ : ] [内容] -->
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} ${LOG_LEVEL_PATTERN:-%5p} ${PID:- } --- [%thread] %logger{50} : %msg%n </pattern>
            <!-- 设置字符集-->
            <charset>UTF-8</charset>
        </encoder>

        <!--2.3 正在记录的日志文档的路径及文档名 -->
        <file>${logPathForLinux}/info-log.log</file>

        <!--2.4 设置日志记录器的滚动策略，按日期，按大小记录 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <fileNamePattern>${logOfDay}/info/%d{yyyy-MM-dd}/info-log.%i.log</fileNamePattern>
            <!-- 单个文件日志的大小 X -->
            <maxFileSize>${fileMaxSize}</maxFileSize>
            <!--保存最近 X 天的日志-->
            <maxHistory>${fileMaxHistory}</maxHistory>
            <!--所有的日志文件最大 X G，超过就会删除旧的日志 -->
            <totalSizeCap>${fileTotalSizeCap}</totalSizeCap>
        </rollingPolicy>
    </appender>

    <!--3. 滚动文档 -> ERROR 日志输出 -->
    <appender name = "ERROR_LOG" class = "ch.qos.logback.core.rolling.RollingFileAppender">
        <!--2.1 设置日志级别 -->
        <!-- 日志级别从 低 到 高 分为 TRACE < DEBUG < INFO < WARN < ERROR < FATAL ，如果设置为 WARN ，则低于 WARN 的信息都不会输出 -->
        <!-- 此日志appender是为开发使用，只配置最底级别，控制台输出的日志级别是大于或等于此级别的日志信息-->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>ERROR</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>

        <!--2.2 设置日志的输出格式 -->
        <encoder>
            <!-- 模仿控制台 -->
            <!-- 输出格式：[时间] [级别] [[线程ID] [+++] [截取所在类名前15个字符] [所在类名] [以及类路径] [ : ] [内容] -->
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} ${LOG_LEVEL_PATTERN:-%5p} ${PID:- } --- [%thread] %logger{50} : %msg%n </pattern>
            <!-- 设置字符集-->
            <charset>UTF-8</charset>
        </encoder>

        <!--2.3 正在记录的日志文档的路径及文档名 -->
        <file>${logPathForLinux}/error-log.log</file>

        <!--2.4 设置日志记录器的滚动策略，按日期，按大小记录 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <fileNamePattern>${logOfDay}/error/%d{yyyy-MM-dd}/error-log.%i.log</fileNamePattern>
            <!-- 单个文件日志的大小 X -->
            <maxFileSize> ${fileMaxSize} </maxFileSize>
            <!--保存最近 X 天的日志-->
            <maxHistory> ${fileMaxHistory} </maxHistory>
            <!--所有的日志文件最大 X G，超过就会删除旧的日志 -->
            <totalSizeCap> ${fileTotalSizeCap} </totalSizeCap>
        </rollingPolicy>
    </appender>


    <!-- 此外,如果为某个包单独配置logger -->
    <!--    比如定时任务，写代码的包名为：net.add1s.slf4j-logback  -->
    <!--    步骤如下：-->

    <!--    1、定义一个appender，取名为task（随意，只要下面logger引用就行了）-->
    <!--    appender的配置按照需要即可-->

    <!--    2、定义一个logger:-->
    <!--    <logger name="net.add1s.slf4j-logback" level="DEBUG" additivity="false">-->
    <!--        <appender-ref ref="task" />-->
    <!--    </logger>-->
    <!--    注意：additivity必须设置为false，这样只会交给task这个appender，否则其他appender也会打印net.add1s.slf4j-logback里的log信息。-->

    <!--    3、这样，在net.add1s.slf4j-logback的logger就会是上面定义的logger了。-->
    <!--    private static Logger logger = LoggerFactory.getLogger(Class1.class);-->




    <!--4. 配置多环境日志输出  在application.yml中配置选择哪个profiles : spring.profiles.active=test -->
    <!--测试环境:打印控制台-->
    <springProfile name="dev">
        <root level="CONSOLE">
            <appender-ref ref="CONSOLE"/>
            <appender-ref ref="INFO_LOG"/>
            <appender-ref ref="ERROR_LOG"/>
        </root>
    </springProfile>

    <!--生产环境:打印控制台-->
    <springProfile name="prod">
        <root level="info">
            <appender-ref ref="CONSOLE"/>
            <appender-ref ref="INFO_LOG"/>
            <appender-ref ref="ERROR_LOG"/>
        </root>
    </springProfile>
</configuration>